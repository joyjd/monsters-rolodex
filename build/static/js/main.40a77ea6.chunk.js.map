{"version":3,"sources":["components/cards/cards.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","props","children","name","CardList","className","monsters","map","key","id","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","setSearchText","e","setState","searchText","target","value","state","fetch","then","response","json","users","console","log","this","msg","filterMonsters","filter","monster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"ySAEaA,G,MAAQ,SAACC,GACpB,OACE,6BACE,4BAAKA,EAAMC,SAASC,SCDbC,EAAW,SAACH,GACvB,OACE,yBAAKI,UAAU,YACZJ,EAAMK,SAASC,KAAI,SAACD,GAAD,OAClB,kBAAC,EAAD,CAAOE,IAAKF,EAASG,IAAKH,QCNrBI,EAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OAAO,2BAAOC,KAAK,SAASC,YAAaH,EAAaI,SAAUH,KCmCnDI,G,wDA/Bb,aAAe,IAAD,8BACZ,gBAiBFC,cAAgB,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAhB1D,EAAKC,MAAQ,CACXjB,SAAU,GACVc,WAAY,IAJF,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAS,CACZb,SAAUsB,OAGhBC,QAAQC,IAAIC,KAAK9B,MAAM+B,O,+BAGf,IAAD,OACDC,EAAiBF,KAAKR,MAAMjB,SAAS4B,QAAO,SAACC,GAAD,OAAaA,EAAQhC,KAAKiC,cAAcC,SAAS,EAAKd,MAAMH,WAAWgB,kBAEzH,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAAWM,YAAY,kBAAkBC,aAAcmB,KAAKd,gBAC5D,kBAAC,EAAD,CAAUX,SAAU2B,S,GA1BVK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKd,IAAI,WAEXe,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.40a77ea6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Cards = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>{props.children.name}</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './card-list.css';\r\nimport { Cards } from '../cards/cards.component';\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className='cardlist'>\r\n      {props.monsters.map((monsters) => (\r\n        <Cards key={monsters.id}>{monsters}</Cards>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const SearchBox = ({ placeHolder, handleChange }) => {\r\n  return <input type='search' placeholder={placeHolder} onChange={handleChange}></input>;\r\n};\r\n","import React, { Component } from 'react';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchText: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => response.json())\r\n      .then((users) =>\r\n        this.setState({\r\n          monsters: users,\r\n        })\r\n      );\r\n    console.log(this.props.msg);\r\n  }\r\n  setSearchText = (e) => this.setState({ searchText: e.target.value });\r\n  render() {\r\n    const filterMonsters = this.state.monsters.filter((monster) => monster.name.toLowerCase().includes(this.state.searchText.toLowerCase()));\r\n\r\n    return (\r\n      <div className='App'>\r\n        <SearchBox placeHolder='Search Monsters' handleChange={this.setSearchText}></SearchBox>\r\n        <CardList monsters={filterMonsters}></CardList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App msg='hello' />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}